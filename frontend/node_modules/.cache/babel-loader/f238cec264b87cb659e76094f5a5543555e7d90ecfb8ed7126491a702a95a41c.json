{"ast":null,"code":"var _jsxFileName = \"C:\\\\SPRING-BOOT\\\\FlightFrontend\\\\booked-frontend\\\\src\\\\components\\\\SeatSelectionPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\nimport { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nimport './SeatSelection.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SeatSelectionPage = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    flightId\n  } = useParams();\n  const [bookingDetails, setBookingDetails] = useState(null);\n  const [passengerCount, setPassengerCount] = useState(1);\n  const [selectedSeats, setSelectedSeats] = useState([]);\n  const [unavailableSeats, setUnavailableSeats] = useState(new Set());\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [connected, setConnected] = useState(false);\n  const stompClient = useRef(null);\n  const seatPrice = 500;\n  const userId = localStorage.getItem('userId') || 'user_' + Math.random().toString(36).substr(2, 9);\n  const rows = 10;\n  const seatsPerRow = 6;\n  useEffect(() => {\n    if (location.state) {\n      setBookingDetails(location.state.bookingDetails);\n      setPassengerCount(location.state.passengerCount || 1);\n    } else {\n      navigate('/flights');\n      return;\n    }\n    initializeWebSocket();\n    return () => {\n      if (stompClient.current) {\n        // Release all selected seats on unmount\n        selectedSeats.forEach(seat => {\n          releaseSeat(seat);\n        });\n        stompClient.current.deactivate();\n        console.log('WebSocket connection closed');\n      }\n    };\n  }, [location.state]);\n  const initializeWebSocket = () => {\n    if (!(bookingDetails !== null && bookingDetails !== void 0 && bookingDetails.flightId)) {\n      console.log('No flight ID available for WebSocket connection');\n      setError('No flight information available. Please try again.');\n      return;\n    }\n    const flightIdNum = Number(bookingDetails.flightId);\n    if (isNaN(flightIdNum)) {\n      setError('Invalid flight ID format');\n      return;\n    }\n    console.log('Initializing WebSocket connection to flight:', flightIdNum);\n\n    // Clear previous connection\n    if (stompClient.current) {\n      stompClient.current.deactivate();\n    }\n    try {\n      stompClient.current = new Client({\n        webSocketFactory: () => new SockJS('http://localhost:8080/ws'),\n        reconnectDelay: 5000,\n        heartbeatIncoming: 4000,\n        heartbeatOutgoing: 4000,\n        debug: function (str) {\n          console.log('STOMP:', str);\n        },\n        onConnect: frame => {\n          console.log('✅ WebSocket connected successfully!', frame);\n          setConnected(true);\n          setError('');\n\n          // Subscribe to seat updates for this flight\n          stompClient.current.subscribe(`/topic/flight/${flightIdNum}/seats`, message => {\n            console.log('Received seat update:', message.body);\n            try {\n              const updatedUnavailableSeats = JSON.parse(message.body);\n              setUnavailableSeats(new Set(updatedUnavailableSeats));\n            } catch (e) {\n              console.error('Error parsing seat data:', e);\n            }\n          });\n\n          // Request initial unavailable seats\n          console.log('Requesting initial seat data for flight:', flightIdNum);\n          stompClient.current.publish({\n            destination: `/app/flight/${flightIdNum}/seats`,\n            body: JSON.stringify({})\n          });\n        },\n        onStompError: frame => {\n          var _frame$headers;\n          console.error('❌ STOMP error:', frame);\n          setError(`WebSocket protocol error: ${((_frame$headers = frame.headers) === null || _frame$headers === void 0 ? void 0 : _frame$headers.message) || 'Unknown error'}`);\n          setConnected(false);\n        },\n        onWebSocketError: event => {\n          console.error('❌ WebSocket error:', event);\n          setError(`Cannot connect to server. Please check if the server is running on port 8080.`);\n          setConnected(false);\n        },\n        onDisconnect: frame => {\n          console.log('WebSocket disconnected:', frame);\n          setConnected(false);\n        }\n      });\n      stompClient.current.activate();\n    } catch (error) {\n      console.error('❌ WebSocket initialization failed:', error);\n      setError(`Failed to initialize WebSocket: ${error.message}`);\n      setConnected(false);\n    }\n  };\n  const handleSeatSelect = seatNumber => {\n    if (unavailableSeats.has(seatNumber) || !connected) {\n      console.log('Cannot select seat - unavailable or not connected');\n      return;\n    }\n    setSelectedSeats(prev => {\n      if (prev.includes(seatNumber)) {\n        releaseSeat(seatNumber);\n        return prev.filter(seat => seat !== seatNumber);\n      } else if (prev.length < passengerCount) {\n        reserveSeat(seatNumber);\n        return [...prev, seatNumber];\n      }\n      return prev;\n    });\n  };\n  const reserveSeat = seatNumber => {\n    if (stompClient.current && connected && bookingDetails) {\n      try {\n        console.log('Reserving seat:', seatNumber);\n        const flightIdNum = Number(bookingDetails.flightId);\n        const reservationRequest = {\n          flightId: flightIdNum,\n          seatNumber: seatNumber,\n          userId: userId\n        };\n        stompClient.current.publish({\n          destination: '/app/reserve-seat',\n          body: JSON.stringify(reservationRequest)\n        });\n      } catch (error) {\n        console.error('Error reserving seat:', error);\n        setError('Failed to reserve seat. Please try again.');\n      }\n    }\n  };\n  const releaseSeat = seatNumber => {\n    if (stompClient.current && connected && bookingDetails) {\n      try {\n        console.log('Releasing seat:', seatNumber);\n        const flightIdNum = Number(bookingDetails.flightId);\n        const reservationRequest = {\n          flightId: flightIdNum,\n          seatNumber: seatNumber,\n          userId: userId\n        };\n        stompClient.current.publish({\n          destination: '/app/release-seat',\n          body: JSON.stringify(reservationRequest)\n        });\n      } catch (error) {\n        console.error('Error releasing seat:', error);\n      }\n    }\n  };\n  const handleConfirmSeats = async () => {\n    if (selectedSeats.length !== passengerCount) {\n      setError(`Please select exactly ${passengerCount} seat(s)`);\n      return;\n    }\n    try {\n      setLoading(true);\n      navigate(`/flights/booking/${bookingDetails.id}`, {\n        state: {\n          bookingDetails: {\n            ...bookingDetails,\n            selectedSeats: selectedSeats,\n            seatCharges: selectedSeats.length * seatPrice,\n            totalAmount: (bookingDetails.totalAmount || 0) + selectedSeats.length * seatPrice\n          },\n          selectedSeats,\n          seatCharges: selectedSeats.length * seatPrice,\n          totalAmount: (bookingDetails.totalAmount || 0) + selectedSeats.length * seatPrice\n        }\n      });\n    } catch (err) {\n      setError('Failed to proceed to payment');\n      console.error('Navigation error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Rest of your component remains mostly the same...\n  // [Keep your renderSeatMap function and JSX structure]\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"seat-selection-page\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 9\n  }, this);\n};\n_s(SeatSelectionPage, \"hbpOyfkgoJXfPiEPwdXKV80TX0w=\", false, function () {\n  return [useLocation, useNavigate, useParams];\n});\n_c = SeatSelectionPage;\nexport default SeatSelectionPage;\nvar _c;\n$RefreshReg$(_c, \"SeatSelectionPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","useNavigate","useParams","Client","SockJS","jsxDEV","_jsxDEV","SeatSelectionPage","_s","location","navigate","flightId","bookingDetails","setBookingDetails","passengerCount","setPassengerCount","selectedSeats","setSelectedSeats","unavailableSeats","setUnavailableSeats","Set","loading","setLoading","error","setError","connected","setConnected","stompClient","seatPrice","userId","localStorage","getItem","Math","random","toString","substr","rows","seatsPerRow","state","initializeWebSocket","current","forEach","seat","releaseSeat","deactivate","console","log","flightIdNum","Number","isNaN","webSocketFactory","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","debug","str","onConnect","frame","subscribe","message","body","updatedUnavailableSeats","JSON","parse","e","publish","destination","stringify","onStompError","_frame$headers","headers","onWebSocketError","event","onDisconnect","activate","handleSeatSelect","seatNumber","has","prev","includes","filter","length","reserveSeat","reservationRequest","handleConfirmSeats","id","seatCharges","totalAmount","err","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/SPRING-BOOT/FlightFrontend/booked-frontend/src/components/SeatSelectionPage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\r\nimport { Client } from '@stomp/stompjs';\r\nimport SockJS from 'sockjs-client';\r\nimport './SeatSelection.css';\r\n\r\nconst SeatSelectionPage = () => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const { flightId } = useParams();\r\n    \r\n    const [bookingDetails, setBookingDetails] = useState(null);\r\n    const [passengerCount, setPassengerCount] = useState(1);\r\n    const [selectedSeats, setSelectedSeats] = useState([]);\r\n    const [unavailableSeats, setUnavailableSeats] = useState(new Set());\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [connected, setConnected] = useState(false);\r\n    \r\n    const stompClient = useRef(null);\r\n    const seatPrice = 500;\r\n    const userId = localStorage.getItem('userId') || 'user_' + Math.random().toString(36).substr(2, 9);\r\n\r\n    const rows = 10;\r\n    const seatsPerRow = 6;\r\n\r\n    useEffect(() => {\r\n        if (location.state) {\r\n            setBookingDetails(location.state.bookingDetails);\r\n            setPassengerCount(location.state.passengerCount || 1);\r\n        } else {\r\n            navigate('/flights');\r\n            return;\r\n        }\r\n\r\n        initializeWebSocket();\r\n\r\n        return () => {\r\n            if (stompClient.current) {\r\n                // Release all selected seats on unmount\r\n                selectedSeats.forEach(seat => {\r\n                    releaseSeat(seat);\r\n                });\r\n                stompClient.current.deactivate();\r\n                console.log('WebSocket connection closed');\r\n            }\r\n        };\r\n    }, [location.state]);\r\n\r\n    const initializeWebSocket = () => {\r\n        if (!bookingDetails?.flightId) {\r\n            console.log('No flight ID available for WebSocket connection');\r\n            setError('No flight information available. Please try again.');\r\n            return;\r\n        }\r\n\r\n        const flightIdNum = Number(bookingDetails.flightId);\r\n        if (isNaN(flightIdNum)) {\r\n            setError('Invalid flight ID format');\r\n            return;\r\n        }\r\n\r\n        console.log('Initializing WebSocket connection to flight:', flightIdNum);\r\n        \r\n        // Clear previous connection\r\n        if (stompClient.current) {\r\n            stompClient.current.deactivate();\r\n        }\r\n\r\n        try {\r\n            stompClient.current = new Client({\r\n                webSocketFactory: () => new SockJS('http://localhost:8080/ws'),\r\n                reconnectDelay: 5000,\r\n                heartbeatIncoming: 4000,\r\n                heartbeatOutgoing: 4000,\r\n                \r\n                debug: function(str) {\r\n                    console.log('STOMP:', str);\r\n                },\r\n                \r\n                onConnect: (frame) => {\r\n                    console.log('✅ WebSocket connected successfully!', frame);\r\n                    setConnected(true);\r\n                    setError('');\r\n                    \r\n                    // Subscribe to seat updates for this flight\r\n                    stompClient.current.subscribe(\r\n                        `/topic/flight/${flightIdNum}/seats`, \r\n                        (message) => {\r\n                            console.log('Received seat update:', message.body);\r\n                            try {\r\n                                const updatedUnavailableSeats = JSON.parse(message.body);\r\n                                setUnavailableSeats(new Set(updatedUnavailableSeats));\r\n                            } catch (e) {\r\n                                console.error('Error parsing seat data:', e);\r\n                            }\r\n                        }\r\n                    );\r\n                    \r\n                    // Request initial unavailable seats\r\n                    console.log('Requesting initial seat data for flight:', flightIdNum);\r\n                    stompClient.current.publish({\r\n                        destination: `/app/flight/${flightIdNum}/seats`,\r\n                        body: JSON.stringify({}),\r\n                    });\r\n                },\r\n                \r\n                onStompError: (frame) => {\r\n                    console.error('❌ STOMP error:', frame);\r\n                    setError(`WebSocket protocol error: ${frame.headers?.message || 'Unknown error'}`);\r\n                    setConnected(false);\r\n                },\r\n                \r\n                onWebSocketError: (event) => {\r\n                    console.error('❌ WebSocket error:', event);\r\n                    setError(`Cannot connect to server. Please check if the server is running on port 8080.`);\r\n                    setConnected(false);\r\n                },\r\n                \r\n                onDisconnect: (frame) => {\r\n                    console.log('WebSocket disconnected:', frame);\r\n                    setConnected(false);\r\n                }\r\n            });\r\n            \r\n            stompClient.current.activate();\r\n            \r\n        } catch (error) {\r\n            console.error('❌ WebSocket initialization failed:', error);\r\n            setError(`Failed to initialize WebSocket: ${error.message}`);\r\n            setConnected(false);\r\n        }\r\n    };\r\n\r\n    const handleSeatSelect = (seatNumber) => {\r\n        if (unavailableSeats.has(seatNumber) || !connected) {\r\n            console.log('Cannot select seat - unavailable or not connected');\r\n            return;\r\n        }\r\n\r\n        setSelectedSeats(prev => {\r\n            if (prev.includes(seatNumber)) {\r\n                releaseSeat(seatNumber);\r\n                return prev.filter(seat => seat !== seatNumber);\r\n            } else if (prev.length < passengerCount) {\r\n                reserveSeat(seatNumber);\r\n                return [...prev, seatNumber];\r\n            }\r\n            return prev;\r\n        });\r\n    };\r\n\r\n    const reserveSeat = (seatNumber) => {\r\n        if (stompClient.current && connected && bookingDetails) {\r\n            try {\r\n                console.log('Reserving seat:', seatNumber);\r\n                const flightIdNum = Number(bookingDetails.flightId);\r\n                const reservationRequest = {\r\n                    flightId: flightIdNum,\r\n                    seatNumber: seatNumber,\r\n                    userId: userId\r\n                };\r\n                \r\n                stompClient.current.publish({\r\n                    destination: '/app/reserve-seat',\r\n                    body: JSON.stringify(reservationRequest)\r\n                });\r\n            } catch (error) {\r\n                console.error('Error reserving seat:', error);\r\n                setError('Failed to reserve seat. Please try again.');\r\n            }\r\n        }\r\n    };\r\n\r\n    const releaseSeat = (seatNumber) => {\r\n        if (stompClient.current && connected && bookingDetails) {\r\n            try {\r\n                console.log('Releasing seat:', seatNumber);\r\n                const flightIdNum = Number(bookingDetails.flightId);\r\n                const reservationRequest = {\r\n                    flightId: flightIdNum,\r\n                    seatNumber: seatNumber,\r\n                    userId: userId\r\n                };\r\n                \r\n                stompClient.current.publish({\r\n                    destination: '/app/release-seat',\r\n                    body: JSON.stringify(reservationRequest)\r\n                });\r\n            } catch (error) {\r\n                console.error('Error releasing seat:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleConfirmSeats = async () => {\r\n        if (selectedSeats.length !== passengerCount) {\r\n            setError(`Please select exactly ${passengerCount} seat(s)`);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            setLoading(true);\r\n            \r\n            navigate(`/flights/booking/${bookingDetails.id}`, {\r\n                state: {\r\n                    bookingDetails: {\r\n                        ...bookingDetails,\r\n                        selectedSeats: selectedSeats,\r\n                        seatCharges: selectedSeats.length * seatPrice,\r\n                        totalAmount: (bookingDetails.totalAmount || 0) + (selectedSeats.length * seatPrice)\r\n                    },\r\n                    selectedSeats,\r\n                    seatCharges: selectedSeats.length * seatPrice,\r\n                    totalAmount: (bookingDetails.totalAmount || 0) + (selectedSeats.length * seatPrice)\r\n                }\r\n            });\r\n            \r\n        } catch (err) {\r\n            setError('Failed to proceed to payment');\r\n            console.error('Navigation error:', err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Rest of your component remains mostly the same...\r\n    // [Keep your renderSeatMap function and JSX structure]\r\n    \r\n    return (\r\n        <div className=\"seat-selection-page\">\r\n            {/* Your JSX here - keep it mostly the same */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SeatSelectionPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}