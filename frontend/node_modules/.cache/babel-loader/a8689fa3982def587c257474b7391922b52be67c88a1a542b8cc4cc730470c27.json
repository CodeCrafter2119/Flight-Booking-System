{"ast":null,"code":"var _jsxFileName = \"C:\\\\SPRING-BOOT\\\\FlightFrontend\\\\booked-frontend\\\\src\\\\security\\\\MainContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { ExecuteJwtAuthAPI, RegisterFlightAdmin } from \"../api/CallingApi\";\nimport { urlAPI } from \"../api/ApiClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// In your AuthContext.js\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider({\n  children\n}) {\n  _s2();\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const [username, setUsername] = useState(null);\n  const [token, setToken] = useState(null);\n  const [roles, setRoles] = useState([]); // Add roles state\n\n  async function login(username, password) {\n    try {\n      const response = await ExecuteJwtAuthAPI(username, password);\n      if (response.status === 200) {\n        const JWToken = 'Bearer ' + response.data.token;\n        setAuthenticated(true);\n        setToken(JWToken);\n        setUsername(username);\n\n        // Extract roles from the token (assuming your backend includes roles in the JWT)\n        const decodedToken = parseJwt(response.data.token);\n        setRoles(decodedToken.roles || []);\n        urlAPI.interceptors.request.use(config => {\n          config.headers.Authorization = JWToken;\n          return config;\n        });\n        return true;\n      } else {\n        logout();\n        return false;\n      }\n    } catch (error) {\n      logout();\n      return false;\n    }\n  }\n  async function register(username, password) {\n    try {\n      const response = await RegisterFlightAdmin({\n        username,\n        password\n      });\n      if (response.status === 201 || response.status === 200) {\n        // Auto-login after successful registration\n        return await login(username, password);\n      }\n      return false;\n    } catch (error) {\n      var _error$response;\n      console.error('Registration error:', error);\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Registration failed'\n      };\n    }\n  }\n  ;\n  function logout() {\n    setAuthenticated(false);\n    setUsername(null);\n    setToken(null);\n    setRoles([]);\n  }\n\n  // Helper function to parse JWT\n  function parseJwt(token) {\n    try {\n      return JSON.parse(atob(token.split('.')[1]));\n    } catch (e) {\n      return {};\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      user: currentUser,\n      login,\n      logout,\n      register,\n      username,\n      token,\n      roles\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"cPZsJiLy87irkqz8t6klXzdwq28=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","ExecuteJwtAuthAPI","RegisterFlightAdmin","urlAPI","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setAuthenticated","username","setUsername","token","setToken","roles","setRoles","login","password","response","status","JWToken","data","decodedToken","parseJwt","interceptors","request","use","config","headers","Authorization","logout","error","register","_error$response","console","message","JSON","parse","atob","split","e","Provider","value","user","currentUser","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/SPRING-BOOT/FlightFrontend/booked-frontend/src/security/MainContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\r\n\r\nimport { ExecuteJwtAuthAPI, RegisterFlightAdmin } from \"../api/CallingApi\";\r\nimport { urlAPI } from \"../api/ApiClient\";\r\n\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext)\r\n\r\n\r\n// In your AuthContext.js\r\nexport default function AuthProvider({ children }) {\r\n    const [isAuthenticated, setAuthenticated] = useState(false);\r\n    const [username, setUsername] = useState(null);\r\n    const [token, setToken] = useState(null);\r\n    const [roles, setRoles] = useState([]); // Add roles state\r\n\r\n    async function login(username, password) {\r\n        try {\r\n            const response = await ExecuteJwtAuthAPI(username, password);\r\n            \r\n            if (response.status === 200) {\r\n                const JWToken = 'Bearer ' + response.data.token;\r\n                setAuthenticated(true);\r\n                setToken(JWToken);\r\n                setUsername(username);\r\n                \r\n                // Extract roles from the token (assuming your backend includes roles in the JWT)\r\n                const decodedToken = parseJwt(response.data.token);\r\n                setRoles(decodedToken.roles || []);\r\n                \r\n                urlAPI.interceptors.request.use((config) => {\r\n                    config.headers.Authorization = JWToken;\r\n                    return config;\r\n                });\r\n                return true;\r\n            } else {\r\n                logout();\r\n                return false; \r\n            }\r\n        } catch(error) {\r\n            logout();\r\n            return false;\r\n        }\r\n    }\r\n\r\n      async function register(username, password) {\r\n        try {\r\n            const response = await RegisterFlightAdmin({ username, password });\r\n            \r\n            if (response.status === 201 || response.status === 200) {\r\n                // Auto-login after successful registration\r\n                return await login(username, password);\r\n            }\r\n            return false;\r\n        } catch (error) {\r\n            console.error('Registration error:', error);\r\n            throw error.response?.data || { message: 'Registration failed' };\r\n        }\r\n    };\r\n\r\n    function logout() {\r\n        setAuthenticated(false);\r\n        setUsername(null);\r\n        setToken(null);\r\n        setRoles([]);\r\n    }\r\n\r\n    // Helper function to parse JWT\r\n    function parseJwt(token) {\r\n        try {\r\n            return JSON.parse(atob(token.split('.')[1]));\r\n        } catch (e) {\r\n            return {};\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isAuthenticated,user: currentUser, login, logout, register,username, token, roles }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}